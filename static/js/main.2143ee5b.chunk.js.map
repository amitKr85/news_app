{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","getUrl","data","type","Page","props","comps","articles","map","article","i","key","style","borderWidth","borderStyle","borderColor","src","urlToImage","alt","title","href","url","description","App","state","query","category","handleSubmit","evt","preventDefault","loadData","handleCategory","cat","setState","fetch","then","res","json","console","log","catch","err","this","comp","className","onSubmit","name","value","onChange","e","target","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,mJCO3C,SAASC,EAAOC,EAAMC,GAClB,MAAM,GAAN,OAHW,sBAGX,6BAAqCA,EAArC,YAA6CD,EAA7C,mBAFQ,oCAKZ,SAASE,EAAKC,GACV,IAAMC,EAAQD,EAAMH,KAAKK,SAASC,KAAI,SAACC,EAASC,GAC5C,OACI,yBAAKC,IAAKD,EAAGE,MAAO,CAAEC,YAAa,YAAaC,YAAa,QAASC,YAAa,QAC/E,6BACI,yBAAKC,IAAKP,EAAQQ,WAAYC,IAAKT,EAAQU,SAE/C,6BACI,2BAAG,uBAAGC,KAAMX,EAAQY,KAAMZ,EAAQU,QAClC,2BAAIV,EAAQa,kBAK5B,OACI,6BAAMhB,G,IAmFCiB,E,4MA7EXC,MAAQ,CACJA,MAAO,UACPtB,KAAM,GACNuB,MAAO,GACPC,SAAU,W,EAOdC,aAAe,SAACC,GACZA,EAAIC,iBAEJ,EAAKC,SAAS,EAAKN,MAAMC,MAAO,M,EAGpCM,eAAiB,SAACC,GAAD,OAAS,SAACJ,GACvBA,EAAIC,iBAEJ,EAAKC,SAASE,EAAK,c,EAGvBF,SAAW,SAAC5B,GAA6B,IAAvBC,EAAsB,uDAAf,WAErB,EAAK8B,SAAS,CAAET,MAAO,UAAWE,SAAUxB,IAC5CgC,MAAMjC,EAAOC,EAAMC,IACdgC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFC,QAAQC,IAAIF,GACZ,EAAKJ,SAAS,CAAET,MAAO,SAAUtB,KAAMmC,OAE1CG,OAAM,SAAAC,GACHH,QAAQC,IAAIE,GACZ,EAAKR,SAAS,CAAET,MAAO,e,kEA1B/BkB,KAAKZ,SAASY,KAAKlB,MAAME,Y,+BA+BnB,IACFiB,EADC,OAEL,OAAQD,KAAKlB,MAAMA,OACf,IAAK,UAAWmB,EAAO,4CAAwB,MAC/C,IAAK,SAAUA,EAAO,6BAAM,kBAACvC,EAAD,CAAMF,KAAMwC,KAAKlB,MAAMtB,QAAiB,MACpE,IAAK,SAAUyC,EAAO,uCAG1B,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,0BAAMC,SAAUH,KAAKf,cACjB,2BACIxB,KAAK,OACL2C,KAAK,QACLC,MAAOL,KAAKlB,MAAMC,MAClBuB,SAAU,SAACC,GACP,EAAKhB,SAAS,CAAER,MAAOwB,EAAEC,OAAOH,WAGxC,4CAGR,yBAAKH,UAAU,OACX,yBAAKA,UAAU,OAAM,uBAAGxB,KAAK,IAAI+B,QAAST,KAAKX,eAAe,YAAzC,YACrB,yBAAKa,UAAU,OAAM,uBAAGxB,KAAK,IAAI+B,QAAST,KAAKX,eAAe,WAAzC,WACrB,yBAAKa,UAAU,OAAM,uBAAGxB,KAAK,IAAI+B,QAAST,KAAKX,eAAe,kBAAzC,kBACrB,yBAAKa,UAAU,OAAM,uBAAGxB,KAAK,IAAI+B,QAAST,KAAKX,eAAe,aAAzC,aACrB,yBAAKa,UAAU,OAAM,uBAAGxB,KAAK,IAAI+B,QAAST,KAAKX,eAAe,eAAzC,gBAEzB,yBAAKa,UAAU,OACVD,Q,GAxEHS,IAAMC,WClBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.2143ee5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst url = \"http://dummix.cf/match/get_views.php\";\nconst domain = \"https://newsapi.org\";\nconst key = \"0f023bbace9f4c85bc59fcaa4b77804d\";\nfunction getUrl(data, type) {\n    return `${domain}/v2/top-headlines?${type}=${data}&apiKey=${key}`\n}\n\nfunction Page(props) {\n    const comps = props.data.articles.map((article, i) => {\n        return (\n            <div key={i} style={{ borderWidth: \"0 0 5px 0\", borderStyle: \"solid\", borderColor: \"red\" }}>\n                <div>\n                    <img src={article.urlToImage} alt={article.title} />\n                </div>\n                <div>\n                    <p><a href={article.url}>{article.title}</a></p>\n                    <p>{article.description}</p>\n                </div>\n            </div>\n        );\n    });\n    return (\n        <div>{comps}</div>\n    );\n}\n\nclass App extends React.Component {\n\n    state = {\n        state: \"loading\",\n        data: [],\n        query: \"\",\n        category: \"general\"\n    };\n\n    componentDidMount() {\n        this.loadData(this.state.category);\n    }\n\n    handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(this.state.query);\n        this.loadData(this.state.query, \"q\");\n    }\n\n    handleCategory = (cat) => (evt) => {\n        evt.preventDefault();\n        // alert(cat);\n        this.loadData(cat, \"category\");\n    }\n\n    loadData = (data, type = \"category\") => {\n\n        this.setState({ state: \"loading\", category: data });\n        fetch(getUrl(data, type))\n            .then(res => res.json())\n            .then(json => {\n                console.log(json);\n                this.setState({ state: \"loaded\", data: json });\n            })\n            .catch(err => {\n                console.log(err);\n                this.setState({ state: \"failed\" });\n            });\n    }\n\n\n    render() {\n        let comp;\n        switch (this.state.state) {\n            case \"loading\": comp = <div>Loading ...</div>; break;\n            case \"loaded\": comp = <div>{<Page data={this.state.data} />}</div>; break;\n            case \"failed\": comp = <div>Failed</div>; break;\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <form onSubmit={this.handleSubmit}>\n                        <input\n                            type=\"text\"\n                            name=\"query\"\n                            value={this.state.query}\n                            onChange={(e) => {\n                                this.setState({ query: e.target.value });\n                            }}\n                        />\n                        <button>Search</button>\n                    </form>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\"><a href=\"#\" onClick={this.handleCategory(\"general\")} >General</a></div>\n                    <div className=\"col\"><a href=\"#\" onClick={this.handleCategory(\"sports\")} >Sports</a></div>\n                    <div className=\"col\"><a href=\"#\" onClick={this.handleCategory(\"entertainment\")} >Entertainment</a></div>\n                    <div className=\"col\"><a href=\"#\" onClick={this.handleCategory(\"business\")} >Business</a></div>\n                    <div className=\"col\"><a href=\"#\" onClick={this.handleCategory(\"technology\")} >Technology</a></div>\n                </div>\n                <div className=\"row\">\n                    {comp}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}